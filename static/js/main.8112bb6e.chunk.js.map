{"version":3,"sources":["components/AppBar.js","components/PokeCard.js","components/Content.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","sectionDesktop","sectionMobile","PrimarySearchAppBar","classes","className","AppBar","Toolbar","Typography","variant","src","alt","logo","capitalize","s","charAt","toUpperCase","slice","PokeCard","props","fetchAPI","bind","state","imgUrl","TypeList","MoreInfo","fetch","this","url","response","json","responseJSON","setState","sprites","front_default","types","map","type","name","prevProps","subheader","length","wikiLink","Card","CardHeader","CardMedia","style","image","CardActions","Button","size","href","target","React","Component","Content","pokemon","offset","responsePokemon","results","pokeObj","getPokeCard","Grid","item","xs","sm","md","rand","parseInt","Math","floor","random","container","justify","onClick","updateOffset","Copyright","allign","Link","Date","getFullYear","main","marginTop","marginBottom","footer","grey","StickyFooter","root","App","Container","fixed","Boolean","window","location","hostname","match","createMuiTheme","primary","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8112bb6e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { fade, makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n// import InputBase from \"@material-ui/core/InputBase\";\r\n// import SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\"\r\n    }\r\n  },\r\n  search: {\r\n    position: \"relative\",\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    \"&:hover\": {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25)\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: \"auto\"\r\n    }\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\"\r\n  },\r\n  inputRoot: {\r\n    color: \"inherit\"\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create(\"width\"),\r\n    width: \"100%\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      width: \"20ch\"\r\n    }\r\n  },\r\n  sectionDesktop: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"flex\"\r\n    }\r\n  },\r\n  sectionMobile: {\r\n    display: \"flex\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"none\"\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function PrimarySearchAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\" color=\"primary\">\r\n        <Toolbar>\r\n          <Typography variant=\"h3\" className={classes.title}>\r\n          P\r\n          <img src=\"https://www.pokemon.com/favicon.ico\" alt=\"logo\" className={classes.logo} width=\"27\" height=\"27\" />\r\n          kedex\r\n        </Typography>\r\n        {/* <div className={classes.search}>\r\n          <div className={classes.searchIcon}>\r\n            <SearchIcon />\r\n          </div>\r\n            <InputBase\r\n              placeholder=\"Searchâ€¦\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput\r\n              }}\r\n              inputProps={{ \"aria-label\": \"search\" }}\r\n            />\r\n          </div>\r\n        <div className={classes.grow} /> */}\r\n      </Toolbar>\r\n    </AppBar>\r\n  </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { CardMedia } from \"@material-ui/core\";\r\n\r\nconst capitalize = (s) => {\r\n  if (typeof s !== 'string') return ''\r\n  return s.charAt(0).toUpperCase() + s.slice(1)\r\n}\r\n\r\nclass PokeCard extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.fetchAPI = this.fetchAPI.bind(this);\r\n    this.state = {imgUrl:\"\", TypeList:\"\", MoreInfo:[]};\r\n\r\n  }\r\n  \r\n  async fetchAPI() {\r\n\r\n    const response = await fetch(this.props.url);\r\n    const responseJSON = await response.json();\r\n    this.setState ({\r\n      imgUrl: responseJSON.sprites.front_default,\r\n      TypeList: responseJSON.types.map(type => type.type.name),\r\n      MoreInfo: responseJSON\r\n\r\n    \r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchAPI();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.name !== this.props.name) {\r\n      this.fetchAPI();\r\n    }\r\n  }\r\n\r\n  render () {\r\n    //Vars\r\n    let name = capitalize(this.props.name);\r\n    let subheader = capitalize(this.state.TypeList[0])\r\n    if(this.state.TypeList.length === 2){\r\n      subheader += \", \" + capitalize(this.state.TypeList[1]);\r\n    }\r\n    let wikiLink = \"https://bulbapedia.bulbagarden.net/wiki/\"+this.props.name+\"_(Pok%C3%A9mon)\"\r\n\r\n    return (\r\n      <Card>\r\n        <CardHeader\r\n          title={name}\r\n          subheader={subheader}\r\n        />\r\n        <CardMedia style={{ height: \"225px\" }} image={this.state.imgUrl} />\r\n        <CardActions>\r\n          <Button size=\"large\" href={wikiLink} target=\"_blank\">MORE INFO</Button>\r\n        </CardActions>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PokeCard;","import React from 'react';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport PokeCard from \"./PokeCard.js\"\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\n\r\nclass Content extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.fetchAPI = this.fetchAPI.bind(this);\r\n        this.state = {pokemon: [], offset:0};\r\n    }\r\n\r\n    async fetchAPI(offset) {\r\n        let search = \"pikachu\";\r\n        let searching = false;\r\n\r\n        let limit = 24;\r\n        let url = \"https://pokeapi.co/api/v2/pokemon?limit=\"+limit+\"&offset=\"+offset;\r\n        if(searching === true){\r\n            url = \"https://pokeapi.co/api/v2/pokemon/\"+{search};\r\n        }\r\n        const response = await fetch(url);\r\n        const responseJSON = await response.json();\r\n        const responsePokemon = responseJSON.results.map(pokeObj => this.getPokeCard(pokeObj));\r\n        this.setState({pokemon: responsePokemon});\r\n    }\r\n\r\n    componentDidMount() {\r\n         this.fetchAPI(this.state.offset);\r\n    }\r\n\r\n    getPokeCard(pokeObj){\r\n        return (\r\n            <Grid item xs={12} sm={4} md={3} >\r\n                <PokeCard name={pokeObj.name} url={pokeObj.url} />\r\n            </Grid>\r\n            );\r\n    }\r\n\r\n    updateOffset() {\r\n        let rand = parseInt((Math.floor(Math.random() * 893) - 24));\r\n        this.setState({offset: rand});\r\n        this.fetchAPI(rand);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Grid container spacing={2} justify=\"center\">\r\n              {this.state.pokemon}\r\n              <br></br>\r\n              <CardActions>\r\n                <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={() => { this.updateOffset(); }}>MORE POKEMON</Button>\r\n              </CardActions>\r\n            </Grid>\r\n          );\r\n    }\r\n\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" allign=\"left\">\r\n      {'Created by '}\r\n      <Link color=\"inherit\" href=\"https://mitchellciupak.github.io/\">\r\n        Mitchell Ciupak\r\n      </Link>{''}\r\n      {'. '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  main: {\r\n    marginTop: theme.spacing(8),\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  footer: {\r\n    padding: theme.spacing(3, 2),\r\n    marginTop: 'auto',\r\n    backgroundColor:\r\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\r\n  },\r\n}));\r\n\r\nexport default function StickyFooter() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <footer className={classes.footer}>\r\n        <Typography variant=\"body1\">\r\n        P\r\n        <img src=\"https://www.pokemon.com/favicon.ico\" alt=\"logo\" className={classes.logo} width=\"12\" height=\"12\" />\r\n        kedex\r\n        </Typography>\r\n        <Copyright />\r\n      </footer>\r\n    </div>\r\n  );\r\n}","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport AppBar from \"./components/AppBar.js\"\nimport Content from \"./components/Content.js\"\nimport Footer from \"./components/Footer.js\"\n\nfunction App() {\n\n  return (\n    <Container fixed>\n      <AppBar />\n      <br></br>\n      <Content/>\n      <br></br>\n      <Footer />\n      <br></br>\n    </Container>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: '#ffcb05'\n    }\n  }\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}